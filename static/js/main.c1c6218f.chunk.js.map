{"version":3,"sources":["components/Logger.js","App.js","index.js"],"names":["Logger","props","_onMIDISuccess","midiAccess","console","log","inputs","size","values","input","name","onmidimessage","_handleMIDIMessage","push","setState","midiInputs","_onMIDIFailure","error","message","device","target","commandAndChannel","data","channel","command","commandName","commands","get","time","timeStamp","pitch","velocity","length","messageObject","id","state","messages","devices","Set","add","channels","concat","toggleDevice","e","hiddenDevices","value","updated","has","delete","toggleChannel","hiddenChannels","toggleCommand","hiddenCommands","Midi","MIDI_COMMANDS","navigator","requestMIDIAccess","then","this","alert","className","title","onClick","filteredMessages","filter","d","messageElements","reverse","slice","map","Math","floor","includes","getMidiNoteByNr","label","Array","from","sort","a","b","Component","App","href","icon","faGithub","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c1c6218f.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './Logger.css';\r\nimport { Midi } from 'musicvis-lib';\r\n\r\n\r\nexport default class Logger extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            midiInputs: [],\r\n            messages: [],\r\n            // Filter options\r\n            devices: new Set(),\r\n            channels: new Set(),\r\n            commands: new Set(),\r\n            // Filter options set\r\n            hiddenDevices: new Set(),\r\n            hiddenChannels: new Set(),\r\n            hiddenCommands: new Set()\r\n\r\n        };\r\n        this.commands = Midi.MIDI_COMMANDS;\r\n    }\r\n\r\n    componentDidMount() {\r\n        // Request MIDI access\r\n        if (navigator.requestMIDIAccess) {\r\n            navigator.requestMIDIAccess().then(this._onMIDISuccess, this._onMIDIFailure);\r\n        } else {\r\n            console.error('WebMIDI is not supported in this browser.');\r\n            alert('You browser does not support WebMIDI');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles a successful MIDI access request\r\n     * @param {*} midiAccess MIDI access\r\n     */\r\n    _onMIDISuccess = (midiAccess) => {\r\n        console.log('MIDI Access', midiAccess);\r\n        console.log(`${midiAccess.inputs.size} input devices`);\r\n        const inputs = [];\r\n        for (let input of midiAccess.inputs.values()) {\r\n            console.log(` - ${input.name}`);\r\n            input.onmidimessage = this._handleMIDIMessage;\r\n            inputs.push(input);\r\n        }\r\n        this.setState({\r\n            midiInputs: inputs\r\n        });\r\n        // console.groupCollapsed(`${midiAccess.inputs.size} output devices`);\r\n        // for (let output of midiAccess.outputs.values()) {\r\n        //     console.log(` - ${output.name}`);\r\n        // }\r\n        // console.groupEnd();\r\n    }\r\n\r\n    /**\r\n     * Handles MIDI access errors\r\n     * @param {*} error\r\n     */\r\n    _onMIDIFailure = (error) => console.error('Cannot access MIDI devices.', error);\r\n\r\n    /**\r\n     * Handles incoming MIDI messages\r\n     * @param {*} message MIDI message\r\n     */\r\n    _handleMIDIMessage = (message) => {\r\n        // console.log(message);\r\n        const device = message.target.name;\r\n        const commandAndChannel = message.data[0];\r\n        const channel = commandAndChannel % 16;\r\n        const command = commandAndChannel - channel;\r\n        const commandName = this.commands.get(command)?.name || 'unknownCommand';\r\n        const time = message.timeStamp;\r\n        const pitch = message.data[1];\r\n        // A velocity value might not be included with a noteOff command\r\n        const velocity = (message.data.length > 2) ? message.data[2] : 0;\r\n        const messageObject = {\r\n            message,\r\n            id: this.state.messages.length,\r\n            device,\r\n            channel,\r\n            command,\r\n            commandName,\r\n            time,\r\n            pitch,\r\n            velocity\r\n        };\r\n        // Update sets of existing devices, channels, commands\r\n        const devices = new Set(this.state.devices).add(device);\r\n        const channels = new Set(this.state.channels).add(channel);\r\n        const commands = new Set(this.state.commands).add(command);\r\n        this.setState({\r\n            messages: this.state.messages.concat(messageObject),\r\n            devices,\r\n            channels,\r\n            commands\r\n        });\r\n    }\r\n\r\n    toggleDevice = (e) => {\r\n        const { hiddenDevices } = this.state;\r\n        const value = e.target.value;\r\n        const updated = new Set(hiddenDevices);\r\n        if (hiddenDevices.has(value)) {\r\n            updated.delete(value);\r\n        } else {\r\n            updated.add(value);\r\n        }\r\n        this.setState({ hiddenDevices: updated });\r\n    }\r\n\r\n    toggleChannel = (e) => {\r\n        const { hiddenChannels } = this.state;\r\n        const value = +e.target.value;\r\n        const updated = new Set(hiddenChannels);\r\n        if (hiddenChannels.has(value)) {\r\n            updated.delete(value);\r\n        } else {\r\n            updated.add(value);\r\n        }\r\n        this.setState({ hiddenChannels: updated });\r\n    }\r\n\r\n    toggleCommand = (e) => {\r\n        const { hiddenCommands } = this.state;\r\n        const value = +e.target.value;\r\n        const updated = new Set(hiddenCommands);\r\n        if (hiddenCommands.has(value)) {\r\n            updated.delete(value);\r\n        } else {\r\n            updated.add(value);\r\n        }\r\n        this.setState({ hiddenCommands: updated });\r\n    }\r\n\r\n    render() {\r\n        const { messages, midiInputs, devices, channels, commands, hiddenDevices, hiddenChannels, hiddenCommands } = this.state;\r\n\r\n        // Log and show inputs\r\n        const inputs = [];\r\n        for (let input of midiInputs) {\r\n            // console.log(input.name);\r\n            inputs.push((\r\n                <div\r\n                    key={input.name}\r\n                    className='midiInput'\r\n                    title='Click to log the object to the browser console'\r\n                    onClick={() => console.log(input)}\r\n                >\r\n                    {input.name}\r\n                </div>\r\n            ));\r\n        }\r\n        // console.log(midiInputs);\r\n\r\n        // Filter message sby user defined filters\r\n        const filteredMessages = messages.filter(d => {\r\n            const { device, channel, command } = d;\r\n            if (hiddenDevices.has(device) || hiddenChannels.has(channel) || hiddenCommands.has(command)) {\r\n                return false;\r\n            }\r\n            return true;\r\n        });\r\n\r\n        // Create JSX for messages\r\n        const nShown = 50;\r\n        const messageElements = filteredMessages\r\n            .reverse()\r\n            .slice(0, nShown)\r\n            .map(d => (\r\n                <div\r\n                    className={`message ${d.commandName}`}\r\n                    key={d.id}\r\n                    title='Click to log the object to the browser console'\r\n                    onClick={() => console.log(d)}\r\n                >\r\n                    <div className='id' title='Number'>\r\n                        {d.id}\r\n                    </div>\r\n                    <div className='time' title={`Time: ${d.time}`}>\r\n                        {Math.floor(d.time)}\r\n                    </div>\r\n                    <div className='device' title={`Device: ${d.device}`}>\r\n                        {d.device.slice(0, 30)}\r\n                    </div>\r\n                    <div className='channel' title='Channel'>\r\n                        {d.channel}\r\n                    </div>\r\n                    <div className='command' title='Command'>\r\n                        {d.command} {d.commandName}\r\n                    </div>\r\n                    {[128, 144].includes(d.command) && (\r\n                        <div className='pitch' title='Pitch'>\r\n                            {d.pitch} {Midi.getMidiNoteByNr(d.pitch).label}\r\n                        </div>\r\n                    )}\r\n                    {[144].includes(d.command) && (\r\n                        <div className='velocity' title='Velocity'>\r\n                            {d.velocity}\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            ));\r\n\r\n        return (\r\n            <div className='Logger'>\r\n                <div>\r\n                    <h2>{midiInputs.length} MIDI Input{midiInputs.length > 1 && 's'}</h2>\r\n                    <div>\r\n                        {inputs}\r\n                    </div>\r\n                </div>\r\n                <div>\r\n                    <h2>\r\n                        {messages.length} messages, {filteredMessages.length} with current filter, showing newest on top, limited to {nShown}\r\n                    </h2>\r\n                    <div className='filterOptions'>\r\n                        Devices\r\n                        <div>\r\n                            {Array.from(devices).sort().map(d => (\r\n                                <button\r\n                                    key={d}\r\n                                    value={d}\r\n                                    onClick={this.toggleDevice}\r\n                                    className={hiddenDevices.has(d) ? 'hidden' : 'shown'}\r\n                                    title='Click to hide / show'\r\n                                >\r\n                                    {d}\r\n                                </button>\r\n                            ))}\r\n                        </div>\r\n                        Channels\r\n                        <div>\r\n                            {Array.from(channels).sort((a, b) => a - b).map(d => (\r\n                                <button\r\n                                    key={d}\r\n                                    value={d}\r\n                                    onClick={this.toggleChannel}\r\n                                    className={hiddenChannels.has(d) ? 'hidden' : 'shown'}\r\n                                    title='Click to hide / show'\r\n                                >\r\n                                    Channel {d}\r\n                                </button>\r\n                            ))}\r\n                        </div>\r\n                        Commands\r\n                        <div>\r\n                            {Array.from(commands).sort((a, b) => a - b).map(d => {\r\n                                let className = hiddenCommands.has(d) ? 'hidden' : 'shown';\r\n                                const commandName = this.commands.get(d)?.name || 'unknownCommand';\r\n                                className = `${className} ${commandName}`;\r\n                                return (\r\n                                    <button\r\n                                        key={d}\r\n                                        value={d}\r\n                                        onClick={this.toggleCommand}\r\n                                        className={className}\r\n                                        title='Click to hide / show'\r\n                                    >\r\n                                        {d} ({this.commands.get(d).name || 'unknownCommand'})\r\n                                    </button>\r\n                                );\r\n                            })}\r\n                        </div>\r\n                    </div>\r\n                    <div className='message'>\r\n                        <div className='id'>#</div>\r\n                        <div className='time'>Time (ms)</div>\r\n                        <div className='device'>Input</div>\r\n                        <div className='channel'>Channel</div>\r\n                        <div className='command'>Command</div>\r\n                        <div className='pitch'>Note</div>\r\n                        <div className='velocity'>Velocity</div>\r\n                    </div>\r\n                    <div className='messagesContainer'>\r\n                        {messageElements}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from 'react';\nimport './App.css';\n// Views\nimport Logger from './components/Logger';\n// API, data etc.\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faGithub } from '@fortawesome/free-brands-svg-icons';\n\nexport default class App extends Component {\n\n  render() {\n    return (\n      <div className={`App bright`} >\n        <Logger />\n        <div className='githubLink'>\n          <a href='https://github.com/fheyen/webmidi-logger'>\n            <FontAwesomeIcon icon={faGithub} />&nbsp;\n                        https://github.com/fheyen/webmidi-logger\n                    </a>\n        </div>\n      </div >\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}